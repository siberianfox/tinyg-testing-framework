# Example test document.
---

# Minimums:
min_fb: 80
min_hv: 6

# Preconditions for all tests (runs from before() )
precondition:
  setValues: 
    - js: 1    # Should set JSON to strict mode-- for JS parsing
    - ee: 0    # Should disable echo and set JSON mode	-- do this first or responses will get confused
    - js: 1    # Should set JSON to strict mode-- for JS parsing
    - fd: 0    # Should set footer depth
    - ex: 2    # Should set flow control to RTS/CTS
    - jv: 5    # Should set JSON verbosity to max
    - tv: 1    # Should set text to verbose
    - qv: 0    # Should turn queue reports off
    - sv: 1    # Should set status report verbosity to filtered
    - si: 250  # Should set status interval
    - ew: 0    # Should disable window mode
    - hv: 8    # Should set HW version to v8

  reportParameters:
    - id
    - fv
    - fb
    - cv
    - hp
    - hv

# System structure test data
sys:
  propertyList:
    - fb
    - fv
    - hv
    - ja
    - ct
    - mt
    - ej
    - jv
    - tv
    - qv
    - sv
    - si

gcodeDefaults:
  propertyList:
    - gpl
    - gun
    - gco
    - gpa
    - gdi

setParameterTests:
  # Required: ("parameters" as an array OR "parameter" as a string), "value" as the value to send
  # Optional: "returns" OR "exists" OR "hasKeys" OR "exactKeys" (only one), status (assumes zero if missing)

  # Options for resturns, exists, hasKeys, exactKeys, and status:
  # give an array for "returns" for an inclusive range: returns: [0, 10] matches 0 <= x <= 10
  # give an non-null value for "returns" to match exactly
  # give an non-null value for "exists" to match any non-null response
  # give an null value for "returns" (or give neither "exists" or "returns" or "*Keys") to match null or undefined response
  # give hasKeys as an array of key names that must exist, but other keys may exist
  # give exactKeys as an array of key names, and there must be exactly those keys in the response, no more, no less
  # give a "status" value to match *that* non-zero status as success

  - parameter: xxx  # this test fails
    value: null
    status: 100

  ### Communications and formatting ###
  - parameter: ee
    value: 1
    returns: 1

  - parameter: ee
    value: -1
    status: 100

  - parameter: ee
    value: 0
    returns: 0

  - parameter: js
    value: 1
    returns: 1

  - parameter: fd
    value: 0
    returns: 0

  - parameter: ex
    value: 2
    returns: 2

  - parameter: jv
    value: 1
    returns: 1

  - parameter: jv
    value: 2
    returns: 2

  - parameter: jv
    value: 3
    returns: 3

  - parameter: jv
    value: 4
    returns: 4

  - parameter: jv
    value: 5
    returns: 5

  - parameter: tv
    value: 1
    returns: 1

  - parameter: qv
    value: 0
    returns: 0

  - parameter: sv
    value: 1
    returns: 1

  # - parameters:
  #     # Here's a list of parameters that if we set it to 1, we get back 1, witout an error
  #     - jv
  #   value: 1
  #   returns: 1

  - parameter: si
    value: 50
    returns: [100, 1000]

  - parameter: si
    value: 250
    returns: 250

  - parameter: ew
    value: 0
    returns: 0

  - parameter: hv
    value: 8
    returns: 8

  - description: "Setting motor %s to known values"
    parameters: [1, 2, 3, 4, 5, 6]
    value: {ma: 0, sa: 1.8, tr: 1.25, mi: 8, po: 8, pm: 2}
    returns: {ma: 0, sa: 1.8, tr: 1.25, mi: 8, po: 8, pm: 2}
    status: 0

  - description: "Setting motor %s with additional madeup key"
    parameters: [1, 2, 3, 4, 5, 6]
    value: {ma: 0, sa: 1.8, tr: 1.25, mi: 8, po: 8, pm: 2, madeup: 1}
    returns: null
    status: 1

  - description: "Getting motor %s returns correct data"
    parameters: [1, 2, 3, 4, 5, 6]
    value: null
    returns: {ma: 0, sa: 1.8, tr: 1.25, mi: 8, po: 8}
    status: 0

  - description: "Setting axis %s to known values"
    parameters: [x, y, z]
    value: {am: 1, vm: 1000, fr: 1000, tn: 0, tm: 150, jm: 20, jh: 20, jd: 0.05, sn: 1, sx: 3, sv: 500, lv: 100, lb: 5, zb: 1}
    returns: {am: 1, vm: 1000, fr: 1000, tn: 0, tm: 150, jm: 20, jh: 20, jd: 0.05, sn: 1, sx: 3, sv: 500, lv: 100, lb: 5, zb: 1}
    status: 0

  - description: "Setting axis %s to known values"
    parameters: [a, b, c]
    value: {am: 3, vm: 288000, fr: 288000, tn: -1, tm: -1, jm: 5760, jh: 5760, jd: 0.05, ra: 0.198943449, sn: 1, sx: 3, sv: 500, lv: 100, lb: 5, zb: 1}
    returns: {am: 3, vm: 288000, fr: 288000, tn: -1, tm: -1, jm: 5760, jh: 5760, jd: 0.05, ra: 0.199, sn: 1, sx: 3, sv: 500, lv: 100, lb: 5, zb: 1}
    status: 0

  - description: "Getting axis %s returns correct data"
    parameters: [x, y, z]
    value: null
    returns: {am: 1, vm: 1000, fr: 1000, tn: 0, tm: 150, jm: 20, jh: 20, jd: 0.05, sn: 1, sx: 3, sv: 500, lv: 100, lb: 5, zb: 1}
    status: 0

  - description: "Getting axis %s returns correct data"
    parameters: [a, b, c]
    value: null
    returns: {am: 3, vm: 288000, fr: 288000, tn: -1, tm: -1, jm: 5760, jh: 5760, jd: 0.05, ra: 0.199, sn: 1, sx: 3, sv: 500, lv: 100, lb: 5, zb: 1}
    status: 0

  - description: Setup status reports
    parameter: sr
    value: {line: true, posx: true, posy: true, posz: true, posa: true, feed: true, vel: true, unit: true, coor: true, dist: true, frmo: true, momo: true, stat: true}
    exactKeys: [line, posx, posy, posz, posa, feed, vel, unit, coor, dist, frmo, momo, stat]
